



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `PTSConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=(localdb)\v11.0;Initial Catalog=PTS;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;
using System.ComponentModel.DataAnnotations;

namespace PTS
{

    public partial class PTS : Database
    {
        public PTS()
            : base("PTSConnection")
        {
            CommonConstruct();
        }

        public PTS(string connectionStringName)
            : base(connectionStringName)
        {
            CommonConstruct();
        }

        partial void CommonConstruct();

        public interface IFactory
        {
            PTS GetInstance();
        }

        public static IFactory Factory { get; set; }
        public static PTS GetInstance()
        {
            if (_instance != null)
                return _instance;

            if (Factory != null)
                return Factory.GetInstance();
            else
                return new PTS();
        }

        [ThreadStatic]
        static PTS _instance;

        public override void OnBeginTransaction()
        {
            if (_instance == null)
                _instance = this;
        }

        public override void OnEndTransaction()
        {
            if (_instance == this)
                _instance = null;
        }


        public class Record<T> where T : new()
        {
            public static PTS repo { get { return PTS.GetInstance(); } }
            public bool IsNew() { return repo.IsNew(this); }
            public object Insert() { return repo.Insert(this); }

            public void Save() { repo.Save(this); }
            public int Update() { return repo.Update(this); }

            public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
            public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
            public static int Update(Sql sql) { return repo.Update<T>(sql); }
            public int Delete() { return repo.Delete(this); }
            public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
            public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
            public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
            public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
            public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
            public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
            public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
            public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
            public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
            public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
            public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
            public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
            public static T Single(Sql sql) { return repo.Single<T>(sql); }
            public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
            public static T First(Sql sql) { return repo.First<T>(sql); }
            public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
            public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
            public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
            public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
            public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
            public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
            public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
            public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
            public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
            public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

        }

    }






    [TableName("dbo.Personnel")]



    [PrimaryKey("ID")]



    [ExplicitColumns]
    public partial class Personnel : PTS.Record<Personnel>
    {



        [Column]
        public int ID { get; set; }




        [Required]
        [Column]
        [RegularExpression(@"^[a-zA-ZçÇýÝþÞðÐüÜöÖ]*$", ErrorMessage = "Use letters only please")]
        public string Name { get; set; }




        [Required]
        [Column]
        [RegularExpression(@"^[a-zA-ZçÇýÝþÞðÐüÜöÖ]*$", ErrorMessage = "Use letters only please")]
        public string Surname { get; set; }




        [Required]
        [Column]
        [RegularExpression(@"^(\d{11})$", ErrorMessage = "Please enter 11 digits")] 
        public string TC { get; set; }




        [Required]
        [Column]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? EntryDate { get; set; }





        [Column]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? ExitDate { get; set; }



        [Column]
        public string PhotoPath { get; set; }





        [Column]
        public string AdliSicilKaydi { get; set; }





        [Column]
        public string SaglikRaporu { get; set; }





        [Column]
        public string Diploma { get; set; }





        [Column]
        public int? DepartmentID { get; set; }





        [Column]
        public bool? isActive { get; set; }


    }


    public partial class Personnel : PTS.Record<Personnel>
    {
        [ResultColumn]
        public string DepartmentName { get; set; }
    }



    [TableName("dbo.UserRoles")]



    [PrimaryKey("UserID", AutoIncrement = false)]

    [ExplicitColumns]
    public partial class UserRole : PTS.Record<UserRole>
    {



        [Column]
        public int UserID { get; set; }





        [Column]
        public int RoleID { get; set; }



    }



    [TableName("dbo.Department")]



    [PrimaryKey("ID")]



    [ExplicitColumns]
    public partial class Department : PTS.Record<Department>
    {



        [Column]
        public int ID { get; set; }





        [Column]
        public string DepName { get; set; }



    }



    [TableName("dbo.Role")]



    [PrimaryKey("ID")]



    [ExplicitColumns]
    public partial class Role : PTS.Record<Role>
    {



        [Column]
        public int ID { get; set; }





        [Column]
        public string Name { get; set; }



    }



    [TableName("dbo.User")]



    [PrimaryKey("ID")]



    [ExplicitColumns]
    public partial class User : PTS.Record<User>
    {



        [Column]
        public int ID { get; set; }





        [Column]
        public string Username { get; set; }





        [Column]
        public string Password { get; set; }



    }


}



